(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{537:function(e,v,a){"use strict";a.r(v);var s=a(3),_=Object(s.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("Boxx",{attrs:{changeTime:"2000"}}),e._v(" "),a("h2",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[e._v("#")]),e._v(" 作用")]),e._v(" "),a("p",[a("code",[e._v("前端模块化的打包工具：用于处理模块化和打包，可以处理模块之间的依赖。")])]),e._v(" "),a("h2",{attrs:{id:"关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系"}},[e._v("#")]),e._v(" 关系")]),e._v(" "),a("p",[a("code",[e._v("webpack依赖npm打包方式，因此需要有nodejs的环境")])]),e._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[a("code",[e._v("在安装好node的情况下")])]),e._v(" "),a("p",[a("strong",[e._v("全局安装：")]),a("code",[e._v("npm install webpack@版本号 -g")])]),e._v(" "),a("p",[a("strong",[e._v("局部安装：")]),a("code",[e._v("cd 对应目录")]),e._v(" "),a("code",[e._v("npm install webpack@版本号 --save-dev")]),e._v(" "),a("code",[e._v("其中-dev表示编译时依赖，像vue这些的安装就不要添加这个，因为vue也要开发时依赖")])]),e._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),a("p",[a("code",[e._v("一个项目的源码一般都是放在src文件夹中，而dist文件夹中放的是打包后的项目")])]),e._v(" "),a("p",[a("code",[e._v("将dist文件夹给服务器发布")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("一般只需要打包main.js，因为webpack会将有依赖的js文件统一处理生成一个js文件")])]),e._v(" "),a("li",[a("p",[e._v("传统打包方法："),a("code",[e._v("webpack ./src/main.js ./dist/bundle.js")])])]),e._v(" "),a("li",[a("p",[e._v("通过webpack.config.js来配置webpack，使之通过webpack命令就直接打包")])]),e._v(" "),a("li",[a("p",[e._v("那么就先需要通过node的命令")]),e._v(" "),a("ul",[a("li",[e._v("先通过npm init生成一个"),a("code",[e._v("package.json")]),e._v("里面存放项目配置的内容")]),e._v(" "),a("li",[e._v("再通过npm install来安装项目中所用到的node包")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504165815478.png")}}),e._v(" "),a("p",[a("code",[e._v("上图就是通过配置文件来初始话了webpack的入口和出口，其中path用到了node包中的动态获取文件路径的操作，这样可以便捷获取当前目录下的dist文件夹")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504170300488.png")}}),e._v(" "),a("p",[a("code",[e._v("但是一般不使用webpack命令来打包 而是通过npm run build来进行打包 与webpack作用相同")])]),e._v(" "),a("p",[a("code",[e._v("因此只需要在package.json中添加一层映射即可")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504171711707.png")}}),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504171728816.png")}})]),e._v(" "),a("li",[a("p",[e._v("此外每个项目最好都安装本地的webpack，这样项目与项目之间的配置就不会碰撞")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("package.json终端scripts脚本在执行前会先到本地的node_modules路径下寻找命令，找不到再去全局")])])]),e._v(" "),a("li",[a("p",[e._v("执行命令的形式"),a("code",[e._v("npm run 命令")])])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" loader")]),e._v(" "),a("p",[a("code",[e._v("单纯的js模块化打包是不满足日常需求的，给webpack扩展对应的loader就可以实现其他功能")])]),e._v(" "),a("p",[a("code",[e._v("例如ES6转换ES5、less转成css，.vue转成js文件")])]),e._v(" "),a("h5",{attrs:{id:"使用过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用过程"}},[e._v("#")]),e._v(" 使用过程")]),e._v(" "),a("ul",[a("li",[e._v("通过npm安装需要使用的loader")]),e._v(" "),a("li",[e._v("在webpack.config.js中的module关键字下进行配置")])]),e._v(" "),a("h5",{attrs:{id:"举例使用css-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例使用css-loader"}},[e._v("#")]),e._v(" 举例使用css-loader")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("先打开webpack的官方网址，点击中文文档，点击LOADERS")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504175226058.png")}})]),e._v(" "),a("li",[a("p",[e._v("在左边有样式板块，点进去就有css-loader与style-loader")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504175327463.png")}}),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210504175339161.png")}})]),e._v(" "),a("li",[a("p",[e._v("通过这一步骤再使用 "),a("code",[e._v("npm run build")])])]),e._v(" "),a("li",[a("p",[e._v("那么css文件也被打包到bundle.js文件中去，不再需要引入css文件")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("其中style-loader是必备的用于css的DOM显示")])])])]),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"url-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-loader"}},[e._v("#")]),e._v(" url-loader")]),e._v(" "),a("p",[a("strong",[e._v("作用：")]),a("code",[e._v("主要用在了css中的url，例如背景图片，那么单纯的css-loader是不足以打包图片的")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505144631980.png")}}),e._v(" "),a("p",[a("strong",[e._v("配置解释：")]),a("code",[e._v("在上图的url-loader中主要注意的是limit，可以将其看作图片文件大小的极限")])]),e._v(" "),a("p",[a("code",[e._v("只有图片文件大小小于8192kb时，才能通过url-loader转换成base类型，那么可以正常打包和显示。如果图片文件大于limit，那么就需要我们安装file-loader，其中file-loader是不需要配置的。")])]),e._v(" "),a("p",[e._v("**注意事项：**要注意的是图片文件的位置打包完成后一般都是在"),a("code",[e._v("dist")]),e._v("文件夹中，但"),a("code",[e._v("index.html")]),e._v("若不在该文件夹中，那么图片文件的目录回搜索失败，它默认"),a("code",[e._v("index.html")]),e._v("与图片文件在同一目录下。这时候的解决方法是在"),a("code",[e._v("webpack.congif.js")]),e._v("文件的"),a("code",[e._v("output")]),e._v("中添加一个"),a("code",[e._v("publicPath")]),e._v("。")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505145242713.png")}}),e._v(" "),a("p",[e._v("**补充：**默认的图片打包是通过哈希值命名的，并且存放在了dist目录下。我们可以通过"),a("code",[e._v("url-loader")]),e._v("的"),a("code",[e._v("option")]),e._v("配置来实现自定义命名的打包。")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505151902235.png")}}),e._v(" "),a("p",[e._v("给"),a("code",[e._v("option")]),e._v("添加"),a("code",[e._v("name")]),e._v("配置，将打包文件配置在"),a("code",[e._v("dist/img")]),e._v("下且命名为"),a("code",[e._v("原名称.八位哈希.原格式")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505152047647.png")}}),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"es6-es5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-es5"}},[e._v("#")]),e._v(" es6-es5")]),e._v(" "),a("p",[e._v("这里通过官网的babel-loader即可，要注意的是webpack的版本与loader的版本")]),e._v(" "),a("p",[a("code",[e._v("其中的babel-preset-env是需要一个配置文件来设置的，为了应对其他版本的es")])]),e._v(" "),a("p",[e._v("这里我们只使用")]),e._v(" "),a("p",[a("code",[e._v("npm install --save-dev babel-loader@7.1.5 babel-core@6.26.3 babel-preset-es2015@6.24.1")])]),e._v(" "),a("p",[e._v("单纯的实现es6-es5的转换，loader的版本可能低于现在的版本，配置这边也将presets设置为了es2015")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505153859120.png")}}),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"vue-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-loader"}},[e._v("#")]),e._v(" vue-loader")]),e._v(" "),a("p",[e._v("通过webpack引入vue就不需要通过"),a("code",[e._v("<script>")]),e._v("来引入vue的源码了，这就是nmp安装。")]),e._v(" "),a("p",[a("code",[e._v("npm install --save vue")])]),e._v(" "),a("p",[e._v("安装好之后就存放在了node_modules中，直接在js文件中")]),e._v(" "),a("p",[a("code",[e._v("import Vue from ‘vue’")])]),e._v(" "),a("p",[e._v("注意事项：因为vue是存在好几种版本的，默认引入的是")]),e._v(" "),a("p",[a("code",[e._v("vue.runtime.js")])]),e._v(" "),a("p",[e._v("所以我们需要修改默认引入的文件，通过修改webpack的配置")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505160505449.png")}}),e._v(" "),a("p",[e._v("resolve属性中的alias属性就是用来设置寻找vue的默认文件")]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[e._v("#")]),e._v(" Plugin")]),e._v(" "),a("h5",{attrs:{id:"htmlwebpackplugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htmlwebpackplugin"}},[e._v("#")]),e._v(" HtmlWebpackPlugin")]),e._v(" "),a("p",[a("code",[e._v("真实发布项目时是发布dist文件夹中的内容，但是html文件并不在这个文件夹中，这时候使用这个插件")])]),e._v(" "),a("p",[a("strong",[e._v("功能：")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("自动生成html文件")])]),e._v(" "),a("li",[a("code",[e._v("将打包的js文件，自动通过script标签插入到body中")])])]),e._v(" "),a("p",[a("strong",[e._v("安装：")])]),e._v(" "),a("p",[a("code",[e._v("npm install html-webpack-plugin --save-dev")])]),e._v(" "),a("p",[a("strong",[e._v("修改配置")]),e._v("：")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505180928411.png")}}),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505180515215.png")}}),e._v(" "),a("h5",{attrs:{id:"uglifyplugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uglifyplugin"}},[e._v("#")]),e._v(" UglifyPlugin")]),e._v(" "),a("p",[e._v("**作用：**用于js文件的压缩，来缩小内存")]),e._v(" "),a("p",[a("strong",[e._v("安装：")]),a("code",[e._v("npm install uglifyjs-webpack-plugin --save-dev")])]),e._v(" "),a("p",[a("strong",[e._v("配置：")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505181202284.png")}}),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505181209706.png")}}),e._v(" "),a("h5",{attrs:{id:"server插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server插件"}},[e._v("#")]),e._v(" "),a("strong",[e._v("server插件")])]),e._v(" "),a("p",[e._v("**作用：**因为用上了webpack后，每次修改代码都需要重新打包，会十分的不便捷。")]),e._v(" "),a("p",[e._v("**解决方案：**因此webpack-dev-server插件可以给我们提供一个本地服务器用于监听一个文件夹，当文件改变时立即重新编译而不用重新发布")]),e._v(" "),a("p",[e._v("**安装：**npm install --save-dev webpack-dev-server@2.9.3 "),a("code",[e._v("这里的版本要与webpack对应")])]),e._v(" "),a("p",[e._v("**配置：**在webpack-config中添加。")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505183316963.png")}}),e._v(" "),a("p",[a("code",[e._v("其中contentBase表示监听的文件夹，inline表示实时")])]),e._v(" "),a("p",[e._v("**命令设置：**在package.json中添加命令，这样就会局部寻找webpack-dev-server")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505183630595.png")}}),e._v(" "),a("p",[a("strong",[e._v("运行：")]),a("code",[e._v("npm run dev")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505183729863.png")}}),e._v(" "),a("h5",{attrs:{id:"配置文件拆离与合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件拆离与合并"}},[e._v("#")]),e._v(" 配置文件拆离与合并")]),e._v(" "),a("p",[a("code",[e._v("开发时常常会有一个build文件夹用于存放配置文件,目前我们只有一个webpack.config,js配置文件")])]),e._v(" "),a("p",[a("code",[e._v("但常常我们开发时与发布时的配置文件是不同的，例如压缩文件是放在发布时的配置文件，而服务器开启放在开发时的配置文件")])]),e._v(" "),a("p",[a("code",[e._v("因此我们创建三个配置文件放在build文件夹中，独有的部分写出来")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505190654668.png")}}),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505190700723.png")}}),e._v(" "),a("p",[a("code",[e._v("通过webpack-merge插件进行与base-config.js的合并即可")])]),e._v(" "),a("p",[a("strong",[e._v("安装：")]),a("code",[e._v("npm install webpack-merge@4.1.5")])]),e._v(" "),a("p",[a("strong",[e._v("使用：")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在其他的配置文件中将base配置文件导入，再利用"),a("code",[e._v("webpackMerge")]),e._v("合并")])]),e._v(" "),a("li",[a("p",[e._v("修改"),a("code",[e._v("package.json")]),e._v("中的命令运行方式添加上"),a("code",[e._v("--config 配置文件的目录")]),e._v("，这样就不会默认使用的是"),a("code",[e._v("webpack.config.js")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505191050455.png")}})])]),e._v(" "),a("li",[a("p",[e._v("由于新创建了一个build文件夹，那么打包出来的dist文件夹存放的目录需要修改，所以需要修改"),a("code",[e._v("base.config.js")]),e._v("中的path")]),e._v(" "),a("img",{attrs:{src:e.$withBase("../../img/image-20210505191157178.png")}})])])],1)}),[],!1,null,null,null);v.default=_.exports}}]);